Grammar

    0 $accept: program $end

    1 program: program externdef
    2        | %empty

    3 externdef: function
    4          | declaration

    5 function: declarator LP parameters RP compoundstmt

    6 parameters: parameters COMMA declarator
    7           | declarator
    8           | TYPE_VOID
    9           | %empty

   10 declaration: declarator SEM
   11            | declarator OP_ASSIGN expr SEM

   12 declarator: type identifier

   13 type: TYPE_INT

   14 identifier: ID

   15 statement: compoundstmt
   16          | exprstmt
   17          | ctrlstmt
   18          | jumpstmt

   19 compoundstmt: LBR items RBR

   20 items: items item
   21      | %empty

   22 item: declaration
   23     | statement

   24 exprstmt: expr SEM
   25         | SEM

   26 expr: identifier OP_ASSIGN expr
   27     | logorexpr

   28 logorexpr: logorexpr OP_LOGOR logandexpr
   29          | logandexpr

   30 logandexpr: logandexpr OP_LOGAND orexpr
   31           | orexpr

   32 orexpr: orexpr OP_OR xorexpr
   33       | xorexpr

   34 xorexpr: xorexpr OP_XOR andexpr
   35        | andexpr

   36 andexpr: andexpr OP_AND ecmprexpr
   37        | ecmprexpr

   38 ecmprexpr: ecmprexpr OP_EQ cmprexpr
   39          | ecmprexpr OP_NEQ cmprexpr
   40          | cmprexpr

   41 cmprexpr: cmprexpr OP_GT addexpr
   42         | cmprexpr OP_LT addexpr
   43         | cmprexpr OP_GTE addexpr
   44         | cmprexpr OP_LTE addexpr
   45         | addexpr

   46 addexpr: addexpr OP_ADD mulexpr
   47        | addexpr OP_SUB mulexpr
   48        | mulexpr

   49 mulexpr: mulexpr OP_MUL factor
   50        | mulexpr OP_DIV factor
   51        | mulexpr OP_MOD factor
   52        | factor

   53 factor: identifier
   54       | constant
   55       | LP expr RP
   56       | identifier LP arguments RP
   57       | OP_SUB factor
   58       | OP_NOT factor

   59 constant: INT

   60 arguments: arguments COMMA expr
   61          | expr
   62          | %empty

   63 ctrlstmt: IF LP expr RP statement
   64         | IF LP expr RP statement ELSE statement
   65         | WHILE LP expr RP statement
   66         | FOR LP initstmt exprstmt expr RP statement
   67         | FOR LP initstmt exprstmt RP statement

   68 initstmt: exprstmt
   69         | declaration

   70 jumpstmt: RETURN exprstmt


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT <intNum> (258) 59
    ID <str> (259) 14
    TYPE_INT (260) 13
    TYPE_VOID (261) 8
    OP_ADD (262) 46
    OP_SUB (263) 47 57
    OP_MUL (264) 49
    OP_DIV (265) 50
    OP_MOD (266) 51
    OP_GT (267) 41
    OP_LT (268) 42
    OP_GTE (269) 43
    OP_LTE (270) 44
    OP_EQ (271) 38
    OP_NEQ (272) 39
    OP_AND (273) 36
    OP_XOR (274) 34
    OP_OR (275) 32
    OP_NOT (276) 58
    OP_LOGAND (277) 30
    OP_LOGOR (278) 28
    OP_ASSIGN (279) 11 26
    LP (280) 5 55 56 63 64 65 66 67
    RP (281) 5 55 56 63 64 65 66 67
    LBR (282) 19
    RBR (283) 19
    SEM (284) 10 11 24 25
    COMMA (285) 6 60
    IF (286) 63 64
    ELSE (287) 64
    WHILE (288) 65
    FOR (289) 66 67
    RETURN (290) 70
    IFX (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program <unit> (38)
        on left: 1 2
        on right: 0 1
    externdef <node> (39)
        on left: 3 4
        on right: 1
    function <node> (40)
        on left: 5
        on right: 3
    parameters <parameters> (41)
        on left: 6 7 8 9
        on right: 5 6
    declaration <node> (42)
        on left: 10 11
        on right: 4 22 69
    declarator <declarator> (43)
        on left: 12
        on right: 5 6 7 10 11
    type <node> (44)
        on left: 13
        on right: 12
    identifier <node> (45)
        on left: 14
        on right: 12 26 53 56
    statement <node> (46)
        on left: 15 16 17 18
        on right: 23 63 64 65 66 67
    compoundstmt <node> (47)
        on left: 19
        on right: 5 15
    items <compound> (48)
        on left: 20 21
        on right: 19 20
    item <node> (49)
        on left: 22 23
        on right: 20
    exprstmt <node> (50)
        on left: 24 25
        on right: 16 66 67 68 70
    expr <node> (51)
        on left: 26 27
        on right: 11 24 26 55 60 61 63 64 65 66
    logorexpr <node> (52)
        on left: 28 29
        on right: 27 28
    logandexpr <node> (53)
        on left: 30 31
        on right: 28 29 30
    orexpr <node> (54)
        on left: 32 33
        on right: 30 31 32
    xorexpr <node> (55)
        on left: 34 35
        on right: 32 33 34
    andexpr <node> (56)
        on left: 36 37
        on right: 34 35 36
    ecmprexpr <node> (57)
        on left: 38 39 40
        on right: 36 37 38 39
    cmprexpr <node> (58)
        on left: 41 42 43 44 45
        on right: 38 39 40 41 42 43 44
    addexpr <node> (59)
        on left: 46 47 48
        on right: 41 42 43 44 45 46 47
    mulexpr <node> (60)
        on left: 49 50 51 52
        on right: 46 47 48 49 50 51
    factor <node> (61)
        on left: 53 54 55 56 57 58
        on right: 49 50 51 52 57 58
    constant <node> (62)
        on left: 59
        on right: 54
    arguments <arguments> (63)
        on left: 60 61 62
        on right: 56 60
    ctrlstmt <node> (64)
        on left: 63 64 65 66 67
        on right: 17
    initstmt <node> (65)
        on left: 68 69
        on right: 66 67
    jumpstmt <node> (66)
        on left: 70
        on right: 18


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . externdef

    $end      shift, and go to state 2
    TYPE_INT  shift, and go to state 3

    externdef    go to state 4
    function     go to state 5
    declaration  go to state 6
    declarator   go to state 7
    type         go to state 8


State 2

    0 $accept: program $end .

    $default  accept


State 3

   13 type: TYPE_INT .

    $default  reduce using rule 13 (type)


State 4

    1 program: program externdef .

    $default  reduce using rule 1 (program)


State 5

    3 externdef: function .

    $default  reduce using rule 3 (externdef)


State 6

    4 externdef: declaration .

    $default  reduce using rule 4 (externdef)


State 7

    5 function: declarator . LP parameters RP compoundstmt
   10 declaration: declarator . SEM
   11            | declarator . OP_ASSIGN expr SEM

    OP_ASSIGN  shift, and go to state 9
    LP         shift, and go to state 10
    SEM        shift, and go to state 11


State 8

   12 declarator: type . identifier

    ID  shift, and go to state 12

    identifier  go to state 13


State 9

   11 declaration: declarator OP_ASSIGN . expr SEM

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 18
    expr        go to state 19
    logorexpr   go to state 20
    logandexpr  go to state 21
    orexpr      go to state 22
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 10

    5 function: declarator LP . parameters RP compoundstmt

    TYPE_INT   shift, and go to state 3
    TYPE_VOID  shift, and go to state 31

    $default  reduce using rule 9 (parameters)

    parameters  go to state 32
    declarator  go to state 33
    type        go to state 8


State 11

   10 declaration: declarator SEM .

    $default  reduce using rule 10 (declaration)


State 12

   14 identifier: ID .

    $default  reduce using rule 14 (identifier)


State 13

   12 declarator: type identifier .

    $default  reduce using rule 12 (declarator)


State 14

   59 constant: INT .

    $default  reduce using rule 59 (constant)


State 15

   57 factor: OP_SUB . factor

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    factor      go to state 35
    constant    go to state 30


State 16

   58 factor: OP_NOT . factor

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    factor      go to state 36
    constant    go to state 30


State 17

   55 factor: LP . expr RP

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 18
    expr        go to state 37
    logorexpr   go to state 20
    logandexpr  go to state 21
    orexpr      go to state 22
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 18

   26 expr: identifier . OP_ASSIGN expr
   53 factor: identifier .
   56       | identifier . LP arguments RP

    OP_ASSIGN  shift, and go to state 38
    LP         shift, and go to state 39

    $default  reduce using rule 53 (factor)


State 19

   11 declaration: declarator OP_ASSIGN expr . SEM

    SEM  shift, and go to state 40


State 20

   27 expr: logorexpr .
   28 logorexpr: logorexpr . OP_LOGOR logandexpr

    OP_LOGOR  shift, and go to state 41

    $default  reduce using rule 27 (expr)


State 21

   29 logorexpr: logandexpr .
   30 logandexpr: logandexpr . OP_LOGAND orexpr

    OP_LOGAND  shift, and go to state 42

    $default  reduce using rule 29 (logorexpr)


State 22

   31 logandexpr: orexpr .
   32 orexpr: orexpr . OP_OR xorexpr

    OP_OR  shift, and go to state 43

    $default  reduce using rule 31 (logandexpr)


State 23

   33 orexpr: xorexpr .
   34 xorexpr: xorexpr . OP_XOR andexpr

    OP_XOR  shift, and go to state 44

    $default  reduce using rule 33 (orexpr)


State 24

   35 xorexpr: andexpr .
   36 andexpr: andexpr . OP_AND ecmprexpr

    OP_AND  shift, and go to state 45

    $default  reduce using rule 35 (xorexpr)


State 25

   37 andexpr: ecmprexpr .
   38 ecmprexpr: ecmprexpr . OP_EQ cmprexpr
   39          | ecmprexpr . OP_NEQ cmprexpr

    OP_EQ   shift, and go to state 46
    OP_NEQ  shift, and go to state 47

    $default  reduce using rule 37 (andexpr)


State 26

   40 ecmprexpr: cmprexpr .
   41 cmprexpr: cmprexpr . OP_GT addexpr
   42         | cmprexpr . OP_LT addexpr
   43         | cmprexpr . OP_GTE addexpr
   44         | cmprexpr . OP_LTE addexpr

    OP_GT   shift, and go to state 48
    OP_LT   shift, and go to state 49
    OP_GTE  shift, and go to state 50
    OP_LTE  shift, and go to state 51

    $default  reduce using rule 40 (ecmprexpr)


State 27

   45 cmprexpr: addexpr .
   46 addexpr: addexpr . OP_ADD mulexpr
   47        | addexpr . OP_SUB mulexpr

    OP_ADD  shift, and go to state 52
    OP_SUB  shift, and go to state 53

    $default  reduce using rule 45 (cmprexpr)


State 28

   48 addexpr: mulexpr .
   49 mulexpr: mulexpr . OP_MUL factor
   50        | mulexpr . OP_DIV factor
   51        | mulexpr . OP_MOD factor

    OP_MUL  shift, and go to state 54
    OP_DIV  shift, and go to state 55
    OP_MOD  shift, and go to state 56

    $default  reduce using rule 48 (addexpr)


State 29

   52 mulexpr: factor .

    $default  reduce using rule 52 (mulexpr)


State 30

   54 factor: constant .

    $default  reduce using rule 54 (factor)


State 31

    8 parameters: TYPE_VOID .

    $default  reduce using rule 8 (parameters)


State 32

    5 function: declarator LP parameters . RP compoundstmt
    6 parameters: parameters . COMMA declarator

    RP     shift, and go to state 57
    COMMA  shift, and go to state 58


State 33

    7 parameters: declarator .

    $default  reduce using rule 7 (parameters)


State 34

   53 factor: identifier .
   56       | identifier . LP arguments RP

    LP  shift, and go to state 39

    $default  reduce using rule 53 (factor)


State 35

   57 factor: OP_SUB factor .

    $default  reduce using rule 57 (factor)


State 36

   58 factor: OP_NOT factor .

    $default  reduce using rule 58 (factor)


State 37

   55 factor: LP expr . RP

    RP  shift, and go to state 59


State 38

   26 expr: identifier OP_ASSIGN . expr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 18
    expr        go to state 60
    logorexpr   go to state 20
    logandexpr  go to state 21
    orexpr      go to state 22
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 39

   56 factor: identifier LP . arguments RP

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    $default  reduce using rule 62 (arguments)

    identifier  go to state 18
    expr        go to state 61
    logorexpr   go to state 20
    logandexpr  go to state 21
    orexpr      go to state 22
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30
    arguments   go to state 62


State 40

   11 declaration: declarator OP_ASSIGN expr SEM .

    $default  reduce using rule 11 (declaration)


State 41

   28 logorexpr: logorexpr OP_LOGOR . logandexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    logandexpr  go to state 63
    orexpr      go to state 22
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 42

   30 logandexpr: logandexpr OP_LOGAND . orexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    orexpr      go to state 64
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 43

   32 orexpr: orexpr OP_OR . xorexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    xorexpr     go to state 65
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 44

   34 xorexpr: xorexpr OP_XOR . andexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    andexpr     go to state 66
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 45

   36 andexpr: andexpr OP_AND . ecmprexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    ecmprexpr   go to state 67
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 46

   38 ecmprexpr: ecmprexpr OP_EQ . cmprexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    cmprexpr    go to state 68
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 47

   39 ecmprexpr: ecmprexpr OP_NEQ . cmprexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    cmprexpr    go to state 69
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 48

   41 cmprexpr: cmprexpr OP_GT . addexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    addexpr     go to state 70
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 49

   42 cmprexpr: cmprexpr OP_LT . addexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    addexpr     go to state 71
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 50

   43 cmprexpr: cmprexpr OP_GTE . addexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    addexpr     go to state 72
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 51

   44 cmprexpr: cmprexpr OP_LTE . addexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    addexpr     go to state 73
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 52

   46 addexpr: addexpr OP_ADD . mulexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    mulexpr     go to state 74
    factor      go to state 29
    constant    go to state 30


State 53

   47 addexpr: addexpr OP_SUB . mulexpr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    mulexpr     go to state 75
    factor      go to state 29
    constant    go to state 30


State 54

   49 mulexpr: mulexpr OP_MUL . factor

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    factor      go to state 76
    constant    go to state 30


State 55

   50 mulexpr: mulexpr OP_DIV . factor

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    factor      go to state 77
    constant    go to state 30


State 56

   51 mulexpr: mulexpr OP_MOD . factor

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 34
    factor      go to state 78
    constant    go to state 30


State 57

    5 function: declarator LP parameters RP . compoundstmt

    LBR  shift, and go to state 79

    compoundstmt  go to state 80


State 58

    6 parameters: parameters COMMA . declarator

    TYPE_INT  shift, and go to state 3

    declarator  go to state 81
    type        go to state 8


State 59

   55 factor: LP expr RP .

    $default  reduce using rule 55 (factor)


State 60

   26 expr: identifier OP_ASSIGN expr .

    $default  reduce using rule 26 (expr)


State 61

   61 arguments: expr .

    $default  reduce using rule 61 (arguments)


State 62

   56 factor: identifier LP arguments . RP
   60 arguments: arguments . COMMA expr

    RP     shift, and go to state 82
    COMMA  shift, and go to state 83


State 63

   28 logorexpr: logorexpr OP_LOGOR logandexpr .
   30 logandexpr: logandexpr . OP_LOGAND orexpr

    OP_LOGAND  shift, and go to state 42

    $default  reduce using rule 28 (logorexpr)


State 64

   30 logandexpr: logandexpr OP_LOGAND orexpr .
   32 orexpr: orexpr . OP_OR xorexpr

    OP_OR  shift, and go to state 43

    $default  reduce using rule 30 (logandexpr)


State 65

   32 orexpr: orexpr OP_OR xorexpr .
   34 xorexpr: xorexpr . OP_XOR andexpr

    OP_XOR  shift, and go to state 44

    $default  reduce using rule 32 (orexpr)


State 66

   34 xorexpr: xorexpr OP_XOR andexpr .
   36 andexpr: andexpr . OP_AND ecmprexpr

    OP_AND  shift, and go to state 45

    $default  reduce using rule 34 (xorexpr)


State 67

   36 andexpr: andexpr OP_AND ecmprexpr .
   38 ecmprexpr: ecmprexpr . OP_EQ cmprexpr
   39          | ecmprexpr . OP_NEQ cmprexpr

    OP_EQ   shift, and go to state 46
    OP_NEQ  shift, and go to state 47

    $default  reduce using rule 36 (andexpr)


State 68

   38 ecmprexpr: ecmprexpr OP_EQ cmprexpr .
   41 cmprexpr: cmprexpr . OP_GT addexpr
   42         | cmprexpr . OP_LT addexpr
   43         | cmprexpr . OP_GTE addexpr
   44         | cmprexpr . OP_LTE addexpr

    OP_GT   shift, and go to state 48
    OP_LT   shift, and go to state 49
    OP_GTE  shift, and go to state 50
    OP_LTE  shift, and go to state 51

    $default  reduce using rule 38 (ecmprexpr)


State 69

   39 ecmprexpr: ecmprexpr OP_NEQ cmprexpr .
   41 cmprexpr: cmprexpr . OP_GT addexpr
   42         | cmprexpr . OP_LT addexpr
   43         | cmprexpr . OP_GTE addexpr
   44         | cmprexpr . OP_LTE addexpr

    OP_GT   shift, and go to state 48
    OP_LT   shift, and go to state 49
    OP_GTE  shift, and go to state 50
    OP_LTE  shift, and go to state 51

    $default  reduce using rule 39 (ecmprexpr)


State 70

   41 cmprexpr: cmprexpr OP_GT addexpr .
   46 addexpr: addexpr . OP_ADD mulexpr
   47        | addexpr . OP_SUB mulexpr

    OP_ADD  shift, and go to state 52
    OP_SUB  shift, and go to state 53

    $default  reduce using rule 41 (cmprexpr)


State 71

   42 cmprexpr: cmprexpr OP_LT addexpr .
   46 addexpr: addexpr . OP_ADD mulexpr
   47        | addexpr . OP_SUB mulexpr

    OP_ADD  shift, and go to state 52
    OP_SUB  shift, and go to state 53

    $default  reduce using rule 42 (cmprexpr)


State 72

   43 cmprexpr: cmprexpr OP_GTE addexpr .
   46 addexpr: addexpr . OP_ADD mulexpr
   47        | addexpr . OP_SUB mulexpr

    OP_ADD  shift, and go to state 52
    OP_SUB  shift, and go to state 53

    $default  reduce using rule 43 (cmprexpr)


State 73

   44 cmprexpr: cmprexpr OP_LTE addexpr .
   46 addexpr: addexpr . OP_ADD mulexpr
   47        | addexpr . OP_SUB mulexpr

    OP_ADD  shift, and go to state 52
    OP_SUB  shift, and go to state 53

    $default  reduce using rule 44 (cmprexpr)


State 74

   46 addexpr: addexpr OP_ADD mulexpr .
   49 mulexpr: mulexpr . OP_MUL factor
   50        | mulexpr . OP_DIV factor
   51        | mulexpr . OP_MOD factor

    OP_MUL  shift, and go to state 54
    OP_DIV  shift, and go to state 55
    OP_MOD  shift, and go to state 56

    $default  reduce using rule 46 (addexpr)


State 75

   47 addexpr: addexpr OP_SUB mulexpr .
   49 mulexpr: mulexpr . OP_MUL factor
   50        | mulexpr . OP_DIV factor
   51        | mulexpr . OP_MOD factor

    OP_MUL  shift, and go to state 54
    OP_DIV  shift, and go to state 55
    OP_MOD  shift, and go to state 56

    $default  reduce using rule 47 (addexpr)


State 76

   49 mulexpr: mulexpr OP_MUL factor .

    $default  reduce using rule 49 (mulexpr)


State 77

   50 mulexpr: mulexpr OP_DIV factor .

    $default  reduce using rule 50 (mulexpr)


State 78

   51 mulexpr: mulexpr OP_MOD factor .

    $default  reduce using rule 51 (mulexpr)


State 79

   19 compoundstmt: LBR . items RBR

    $default  reduce using rule 21 (items)

    items  go to state 84


State 80

    5 function: declarator LP parameters RP compoundstmt .

    $default  reduce using rule 5 (function)


State 81

    6 parameters: parameters COMMA declarator .

    $default  reduce using rule 6 (parameters)


State 82

   56 factor: identifier LP arguments RP .

    $default  reduce using rule 56 (factor)


State 83

   60 arguments: arguments COMMA . expr

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 18
    expr        go to state 85
    logorexpr   go to state 20
    logandexpr  go to state 21
    orexpr      go to state 22
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 84

   19 compoundstmt: LBR items . RBR
   20 items: items . item

    INT       shift, and go to state 14
    ID        shift, and go to state 12
    TYPE_INT  shift, and go to state 3
    OP_SUB    shift, and go to state 15
    OP_NOT    shift, and go to state 16
    LP        shift, and go to state 17
    LBR       shift, and go to state 79
    RBR       shift, and go to state 86
    SEM       shift, and go to state 87
    IF        shift, and go to state 88
    WHILE     shift, and go to state 89
    FOR       shift, and go to state 90
    RETURN    shift, and go to state 91

    declaration   go to state 92
    declarator    go to state 93
    type          go to state 8
    identifier    go to state 18
    statement     go to state 94
    compoundstmt  go to state 95
    item          go to state 96
    exprstmt      go to state 97
    expr          go to state 98
    logorexpr     go to state 20
    logandexpr    go to state 21
    orexpr        go to state 22
    xorexpr       go to state 23
    andexpr       go to state 24
    ecmprexpr     go to state 25
    cmprexpr      go to state 26
    addexpr       go to state 27
    mulexpr       go to state 28
    factor        go to state 29
    constant      go to state 30
    ctrlstmt      go to state 99
    jumpstmt      go to state 100


State 85

   60 arguments: arguments COMMA expr .

    $default  reduce using rule 60 (arguments)


State 86

   19 compoundstmt: LBR items RBR .

    $default  reduce using rule 19 (compoundstmt)


State 87

   25 exprstmt: SEM .

    $default  reduce using rule 25 (exprstmt)


State 88

   63 ctrlstmt: IF . LP expr RP statement
   64         | IF . LP expr RP statement ELSE statement

    LP  shift, and go to state 101


State 89

   65 ctrlstmt: WHILE . LP expr RP statement

    LP  shift, and go to state 102


State 90

   66 ctrlstmt: FOR . LP initstmt exprstmt expr RP statement
   67         | FOR . LP initstmt exprstmt RP statement

    LP  shift, and go to state 103


State 91

   70 jumpstmt: RETURN . exprstmt

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17
    SEM     shift, and go to state 87

    identifier  go to state 18
    exprstmt    go to state 104
    expr        go to state 98
    logorexpr   go to state 20
    logandexpr  go to state 21
    orexpr      go to state 22
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 92

   22 item: declaration .

    $default  reduce using rule 22 (item)


State 93

   10 declaration: declarator . SEM
   11            | declarator . OP_ASSIGN expr SEM

    OP_ASSIGN  shift, and go to state 9
    SEM        shift, and go to state 11


State 94

   23 item: statement .

    $default  reduce using rule 23 (item)


State 95

   15 statement: compoundstmt .

    $default  reduce using rule 15 (statement)


State 96

   20 items: items item .

    $default  reduce using rule 20 (items)


State 97

   16 statement: exprstmt .

    $default  reduce using rule 16 (statement)


State 98

   24 exprstmt: expr . SEM

    SEM  shift, and go to state 105


State 99

   17 statement: ctrlstmt .

    $default  reduce using rule 17 (statement)


State 100

   18 statement: jumpstmt .

    $default  reduce using rule 18 (statement)


State 101

   63 ctrlstmt: IF LP . expr RP statement
   64         | IF LP . expr RP statement ELSE statement

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 18
    expr        go to state 106
    logorexpr   go to state 20
    logandexpr  go to state 21
    orexpr      go to state 22
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 102

   65 ctrlstmt: WHILE LP . expr RP statement

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17

    identifier  go to state 18
    expr        go to state 107
    logorexpr   go to state 20
    logandexpr  go to state 21
    orexpr      go to state 22
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 103

   66 ctrlstmt: FOR LP . initstmt exprstmt expr RP statement
   67         | FOR LP . initstmt exprstmt RP statement

    INT       shift, and go to state 14
    ID        shift, and go to state 12
    TYPE_INT  shift, and go to state 3
    OP_SUB    shift, and go to state 15
    OP_NOT    shift, and go to state 16
    LP        shift, and go to state 17
    SEM       shift, and go to state 87

    declaration  go to state 108
    declarator   go to state 93
    type         go to state 8
    identifier   go to state 18
    exprstmt     go to state 109
    expr         go to state 98
    logorexpr    go to state 20
    logandexpr   go to state 21
    orexpr       go to state 22
    xorexpr      go to state 23
    andexpr      go to state 24
    ecmprexpr    go to state 25
    cmprexpr     go to state 26
    addexpr      go to state 27
    mulexpr      go to state 28
    factor       go to state 29
    constant     go to state 30
    initstmt     go to state 110


State 104

   70 jumpstmt: RETURN exprstmt .

    $default  reduce using rule 70 (jumpstmt)


State 105

   24 exprstmt: expr SEM .

    $default  reduce using rule 24 (exprstmt)


State 106

   63 ctrlstmt: IF LP expr . RP statement
   64         | IF LP expr . RP statement ELSE statement

    RP  shift, and go to state 111


State 107

   65 ctrlstmt: WHILE LP expr . RP statement

    RP  shift, and go to state 112


State 108

   69 initstmt: declaration .

    $default  reduce using rule 69 (initstmt)


State 109

   68 initstmt: exprstmt .

    $default  reduce using rule 68 (initstmt)


State 110

   66 ctrlstmt: FOR LP initstmt . exprstmt expr RP statement
   67         | FOR LP initstmt . exprstmt RP statement

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17
    SEM     shift, and go to state 87

    identifier  go to state 18
    exprstmt    go to state 113
    expr        go to state 98
    logorexpr   go to state 20
    logandexpr  go to state 21
    orexpr      go to state 22
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 111

   63 ctrlstmt: IF LP expr RP . statement
   64         | IF LP expr RP . statement ELSE statement

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17
    LBR     shift, and go to state 79
    SEM     shift, and go to state 87
    IF      shift, and go to state 88
    WHILE   shift, and go to state 89
    FOR     shift, and go to state 90
    RETURN  shift, and go to state 91

    identifier    go to state 18
    statement     go to state 114
    compoundstmt  go to state 95
    exprstmt      go to state 97
    expr          go to state 98
    logorexpr     go to state 20
    logandexpr    go to state 21
    orexpr        go to state 22
    xorexpr       go to state 23
    andexpr       go to state 24
    ecmprexpr     go to state 25
    cmprexpr      go to state 26
    addexpr       go to state 27
    mulexpr       go to state 28
    factor        go to state 29
    constant      go to state 30
    ctrlstmt      go to state 99
    jumpstmt      go to state 100


State 112

   65 ctrlstmt: WHILE LP expr RP . statement

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17
    LBR     shift, and go to state 79
    SEM     shift, and go to state 87
    IF      shift, and go to state 88
    WHILE   shift, and go to state 89
    FOR     shift, and go to state 90
    RETURN  shift, and go to state 91

    identifier    go to state 18
    statement     go to state 115
    compoundstmt  go to state 95
    exprstmt      go to state 97
    expr          go to state 98
    logorexpr     go to state 20
    logandexpr    go to state 21
    orexpr        go to state 22
    xorexpr       go to state 23
    andexpr       go to state 24
    ecmprexpr     go to state 25
    cmprexpr      go to state 26
    addexpr       go to state 27
    mulexpr       go to state 28
    factor        go to state 29
    constant      go to state 30
    ctrlstmt      go to state 99
    jumpstmt      go to state 100


State 113

   66 ctrlstmt: FOR LP initstmt exprstmt . expr RP statement
   67         | FOR LP initstmt exprstmt . RP statement

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17
    RP      shift, and go to state 116

    identifier  go to state 18
    expr        go to state 117
    logorexpr   go to state 20
    logandexpr  go to state 21
    orexpr      go to state 22
    xorexpr     go to state 23
    andexpr     go to state 24
    ecmprexpr   go to state 25
    cmprexpr    go to state 26
    addexpr     go to state 27
    mulexpr     go to state 28
    factor      go to state 29
    constant    go to state 30


State 114

   63 ctrlstmt: IF LP expr RP statement .
   64         | IF LP expr RP statement . ELSE statement

    ELSE  shift, and go to state 118

    $default  reduce using rule 63 (ctrlstmt)


State 115

   65 ctrlstmt: WHILE LP expr RP statement .

    $default  reduce using rule 65 (ctrlstmt)


State 116

   67 ctrlstmt: FOR LP initstmt exprstmt RP . statement

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17
    LBR     shift, and go to state 79
    SEM     shift, and go to state 87
    IF      shift, and go to state 88
    WHILE   shift, and go to state 89
    FOR     shift, and go to state 90
    RETURN  shift, and go to state 91

    identifier    go to state 18
    statement     go to state 119
    compoundstmt  go to state 95
    exprstmt      go to state 97
    expr          go to state 98
    logorexpr     go to state 20
    logandexpr    go to state 21
    orexpr        go to state 22
    xorexpr       go to state 23
    andexpr       go to state 24
    ecmprexpr     go to state 25
    cmprexpr      go to state 26
    addexpr       go to state 27
    mulexpr       go to state 28
    factor        go to state 29
    constant      go to state 30
    ctrlstmt      go to state 99
    jumpstmt      go to state 100


State 117

   66 ctrlstmt: FOR LP initstmt exprstmt expr . RP statement

    RP  shift, and go to state 120


State 118

   64 ctrlstmt: IF LP expr RP statement ELSE . statement

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17
    LBR     shift, and go to state 79
    SEM     shift, and go to state 87
    IF      shift, and go to state 88
    WHILE   shift, and go to state 89
    FOR     shift, and go to state 90
    RETURN  shift, and go to state 91

    identifier    go to state 18
    statement     go to state 121
    compoundstmt  go to state 95
    exprstmt      go to state 97
    expr          go to state 98
    logorexpr     go to state 20
    logandexpr    go to state 21
    orexpr        go to state 22
    xorexpr       go to state 23
    andexpr       go to state 24
    ecmprexpr     go to state 25
    cmprexpr      go to state 26
    addexpr       go to state 27
    mulexpr       go to state 28
    factor        go to state 29
    constant      go to state 30
    ctrlstmt      go to state 99
    jumpstmt      go to state 100


State 119

   67 ctrlstmt: FOR LP initstmt exprstmt RP statement .

    $default  reduce using rule 67 (ctrlstmt)


State 120

   66 ctrlstmt: FOR LP initstmt exprstmt expr RP . statement

    INT     shift, and go to state 14
    ID      shift, and go to state 12
    OP_SUB  shift, and go to state 15
    OP_NOT  shift, and go to state 16
    LP      shift, and go to state 17
    LBR     shift, and go to state 79
    SEM     shift, and go to state 87
    IF      shift, and go to state 88
    WHILE   shift, and go to state 89
    FOR     shift, and go to state 90
    RETURN  shift, and go to state 91

    identifier    go to state 18
    statement     go to state 122
    compoundstmt  go to state 95
    exprstmt      go to state 97
    expr          go to state 98
    logorexpr     go to state 20
    logandexpr    go to state 21
    orexpr        go to state 22
    xorexpr       go to state 23
    andexpr       go to state 24
    ecmprexpr     go to state 25
    cmprexpr      go to state 26
    addexpr       go to state 27
    mulexpr       go to state 28
    factor        go to state 29
    constant      go to state 30
    ctrlstmt      go to state 99
    jumpstmt      go to state 100


State 121

   64 ctrlstmt: IF LP expr RP statement ELSE statement .

    $default  reduce using rule 64 (ctrlstmt)


State 122

   66 ctrlstmt: FOR LP initstmt exprstmt expr RP statement .

    $default  reduce using rule 66 (ctrlstmt)

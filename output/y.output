Grammar

    0 $accept: program $end

    1 program: program externdef
    2        | %empty

    3 externdef: function
    4          | declaration

    5 function: declarator LP parameters RP compoundstmt

    6 parameters: parameters COMMA declarator
    7           | declarator
    8           | TYPE_VOID
    9           | %empty

   10 declaration: declarator SEM
   11            | declarator OP_ASSIGN expr SEM

   12 declarator: type identifier

   13 type: TYPE_INT
   14     | TYPE_FLOAT
   15     | TYPE_VOID

   16 identifier: ID

   17 statement: compoundstmt
   18          | exprstmt
   19          | ctrlstmt
   20          | jumpstmt

   21 compoundstmt: LBR items RBR

   22 items: items item
   23      | %empty

   24 item: declaration
   25     | statement

   26 exprstmt: expr SEM
   27         | SEM

   28 expr: identifier OP_ASSIGN expr
   29     | logorexpr

   30 logorexpr: logorexpr OP_LOGOR logandexpr
   31          | logandexpr

   32 logandexpr: logandexpr OP_LOGAND orexpr
   33           | orexpr

   34 orexpr: orexpr OP_OR xorexpr
   35       | xorexpr

   36 xorexpr: xorexpr OP_XOR andexpr
   37        | andexpr

   38 andexpr: andexpr OP_AND ecmprexpr
   39        | ecmprexpr

   40 ecmprexpr: ecmprexpr OP_EQ cmprexpr
   41          | ecmprexpr OP_NEQ cmprexpr
   42          | cmprexpr

   43 cmprexpr: cmprexpr OP_GT addexpr
   44         | cmprexpr OP_LT addexpr
   45         | cmprexpr OP_GTE addexpr
   46         | cmprexpr OP_LTE addexpr
   47         | addexpr

   48 addexpr: addexpr OP_ADD mulexpr
   49        | addexpr OP_SUB mulexpr
   50        | mulexpr

   51 mulexpr: mulexpr OP_MUL factor
   52        | mulexpr OP_DIV factor
   53        | mulexpr OP_MOD factor
   54        | factor

   55 factor: identifier
   56       | constant
   57       | LP expr RP
   58       | identifier LP arguments RP
   59       | OP_SUB factor
   60       | OP_NOT factor

   61 constant: NUM_INT
   62         | NUM_FLOAT

   63 arguments: arguments COMMA expr
   64          | expr
   65          | %empty

   66 ctrlstmt: IF LP expr RP statement
   67         | IF LP expr RP statement ELSE statement
   68         | WHILE LP expr RP statement
   69         | FOR LP initstmt exprstmt expr RP statement
   70         | FOR LP initstmt exprstmt RP statement

   71 initstmt: exprstmt
   72         | declaration

   73 jumpstmt: RETURN exprstmt


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    NUM_INT <intNum> (258) 61
    NUM_FLOAT <floatNum> (259) 62
    ID <str> (260) 16
    TYPE_INT (261) 13
    TYPE_FLOAT (262) 14
    TYPE_VOID (263) 8 15
    OP_ADD (264) 48
    OP_SUB (265) 49 59
    OP_MUL (266) 51
    OP_DIV (267) 52
    OP_MOD (268) 53
    OP_GT (269) 43
    OP_LT (270) 44
    OP_GTE (271) 45
    OP_LTE (272) 46
    OP_EQ (273) 40
    OP_NEQ (274) 41
    OP_AND (275) 38
    OP_XOR (276) 36
    OP_OR (277) 34
    OP_NOT (278) 60
    OP_LOGAND (279) 32
    OP_LOGOR (280) 30
    OP_ASSIGN (281) 11 28
    LP (282) 5 57 58 66 67 68 69 70
    RP (283) 5 57 58 66 67 68 69 70
    LBR (284) 21
    RBR (285) 21
    SEM (286) 10 11 26 27
    COMMA (287) 6 63
    IF (288) 66 67
    ELSE (289) 67
    WHILE (290) 68
    FOR (291) 69 70
    RETURN (292) 73
    IFX (293)


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    program <unit> (40)
        on left: 1 2
        on right: 0 1
    externdef <node> (41)
        on left: 3 4
        on right: 1
    function <node> (42)
        on left: 5
        on right: 3
    parameters <parameters> (43)
        on left: 6 7 8 9
        on right: 5 6
    declaration <node> (44)
        on left: 10 11
        on right: 4 24 72
    declarator <declarator> (45)
        on left: 12
        on right: 5 6 7 10 11
    type <type> (46)
        on left: 13 14 15
        on right: 12
    identifier <identifier> (47)
        on left: 16
        on right: 12 28 55 58
    statement <node> (48)
        on left: 17 18 19 20
        on right: 25 66 67 68 69 70
    compoundstmt <compound> (49)
        on left: 21
        on right: 5 17
    items <compound> (50)
        on left: 22 23
        on right: 21 22
    item <node> (51)
        on left: 24 25
        on right: 22
    exprstmt <node> (52)
        on left: 26 27
        on right: 18 69 70 71 73
    expr <node> (53)
        on left: 28 29
        on right: 11 26 28 57 63 64 66 67 68 69
    logorexpr <node> (54)
        on left: 30 31
        on right: 29 30
    logandexpr <node> (55)
        on left: 32 33
        on right: 30 31 32
    orexpr <node> (56)
        on left: 34 35
        on right: 32 33 34
    xorexpr <node> (57)
        on left: 36 37
        on right: 34 35 36
    andexpr <node> (58)
        on left: 38 39
        on right: 36 37 38
    ecmprexpr <node> (59)
        on left: 40 41 42
        on right: 38 39 40 41
    cmprexpr <node> (60)
        on left: 43 44 45 46 47
        on right: 40 41 42 43 44 45 46
    addexpr <node> (61)
        on left: 48 49 50
        on right: 43 44 45 46 47 48 49
    mulexpr <node> (62)
        on left: 51 52 53 54
        on right: 48 49 50 51 52 53
    factor <node> (63)
        on left: 55 56 57 58 59 60
        on right: 51 52 53 54 59 60
    constant <node> (64)
        on left: 61 62
        on right: 56
    arguments <arguments> (65)
        on left: 63 64 65
        on right: 58 63
    ctrlstmt <node> (66)
        on left: 66 67 68 69 70
        on right: 19
    initstmt <node> (67)
        on left: 71 72
        on right: 69 70
    jumpstmt <node> (68)
        on left: 73
        on right: 20


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . externdef

    $end        shift, and go to state 2
    TYPE_INT    shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    TYPE_VOID   shift, and go to state 5

    externdef    go to state 6
    function     go to state 7
    declaration  go to state 8
    declarator   go to state 9
    type         go to state 10


State 2

    0 $accept: program $end .

    $default  accept


State 3

   13 type: TYPE_INT .

    $default  reduce using rule 13 (type)


State 4

   14 type: TYPE_FLOAT .

    $default  reduce using rule 14 (type)


State 5

   15 type: TYPE_VOID .

    $default  reduce using rule 15 (type)


State 6

    1 program: program externdef .

    $default  reduce using rule 1 (program)


State 7

    3 externdef: function .

    $default  reduce using rule 3 (externdef)


State 8

    4 externdef: declaration .

    $default  reduce using rule 4 (externdef)


State 9

    5 function: declarator . LP parameters RP compoundstmt
   10 declaration: declarator . SEM
   11            | declarator . OP_ASSIGN expr SEM

    OP_ASSIGN  shift, and go to state 11
    LP         shift, and go to state 12
    SEM        shift, and go to state 13


State 10

   12 declarator: type . identifier

    ID  shift, and go to state 14

    identifier  go to state 15


State 11

   11 declaration: declarator OP_ASSIGN . expr SEM

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 21
    expr        go to state 22
    logorexpr   go to state 23
    logandexpr  go to state 24
    orexpr      go to state 25
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 12

    5 function: declarator LP . parameters RP compoundstmt

    TYPE_INT    shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    TYPE_VOID   shift, and go to state 34

    $default  reduce using rule 9 (parameters)

    parameters  go to state 35
    declarator  go to state 36
    type        go to state 10


State 13

   10 declaration: declarator SEM .

    $default  reduce using rule 10 (declaration)


State 14

   16 identifier: ID .

    $default  reduce using rule 16 (identifier)


State 15

   12 declarator: type identifier .

    $default  reduce using rule 12 (declarator)


State 16

   61 constant: NUM_INT .

    $default  reduce using rule 61 (constant)


State 17

   62 constant: NUM_FLOAT .

    $default  reduce using rule 62 (constant)


State 18

   59 factor: OP_SUB . factor

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    factor      go to state 38
    constant    go to state 33


State 19

   60 factor: OP_NOT . factor

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    factor      go to state 39
    constant    go to state 33


State 20

   57 factor: LP . expr RP

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 21
    expr        go to state 40
    logorexpr   go to state 23
    logandexpr  go to state 24
    orexpr      go to state 25
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 21

   28 expr: identifier . OP_ASSIGN expr
   55 factor: identifier .
   58       | identifier . LP arguments RP

    OP_ASSIGN  shift, and go to state 41
    LP         shift, and go to state 42

    $default  reduce using rule 55 (factor)


State 22

   11 declaration: declarator OP_ASSIGN expr . SEM

    SEM  shift, and go to state 43


State 23

   29 expr: logorexpr .
   30 logorexpr: logorexpr . OP_LOGOR logandexpr

    OP_LOGOR  shift, and go to state 44

    $default  reduce using rule 29 (expr)


State 24

   31 logorexpr: logandexpr .
   32 logandexpr: logandexpr . OP_LOGAND orexpr

    OP_LOGAND  shift, and go to state 45

    $default  reduce using rule 31 (logorexpr)


State 25

   33 logandexpr: orexpr .
   34 orexpr: orexpr . OP_OR xorexpr

    OP_OR  shift, and go to state 46

    $default  reduce using rule 33 (logandexpr)


State 26

   35 orexpr: xorexpr .
   36 xorexpr: xorexpr . OP_XOR andexpr

    OP_XOR  shift, and go to state 47

    $default  reduce using rule 35 (orexpr)


State 27

   37 xorexpr: andexpr .
   38 andexpr: andexpr . OP_AND ecmprexpr

    OP_AND  shift, and go to state 48

    $default  reduce using rule 37 (xorexpr)


State 28

   39 andexpr: ecmprexpr .
   40 ecmprexpr: ecmprexpr . OP_EQ cmprexpr
   41          | ecmprexpr . OP_NEQ cmprexpr

    OP_EQ   shift, and go to state 49
    OP_NEQ  shift, and go to state 50

    $default  reduce using rule 39 (andexpr)


State 29

   42 ecmprexpr: cmprexpr .
   43 cmprexpr: cmprexpr . OP_GT addexpr
   44         | cmprexpr . OP_LT addexpr
   45         | cmprexpr . OP_GTE addexpr
   46         | cmprexpr . OP_LTE addexpr

    OP_GT   shift, and go to state 51
    OP_LT   shift, and go to state 52
    OP_GTE  shift, and go to state 53
    OP_LTE  shift, and go to state 54

    $default  reduce using rule 42 (ecmprexpr)


State 30

   47 cmprexpr: addexpr .
   48 addexpr: addexpr . OP_ADD mulexpr
   49        | addexpr . OP_SUB mulexpr

    OP_ADD  shift, and go to state 55
    OP_SUB  shift, and go to state 56

    $default  reduce using rule 47 (cmprexpr)


State 31

   50 addexpr: mulexpr .
   51 mulexpr: mulexpr . OP_MUL factor
   52        | mulexpr . OP_DIV factor
   53        | mulexpr . OP_MOD factor

    OP_MUL  shift, and go to state 57
    OP_DIV  shift, and go to state 58
    OP_MOD  shift, and go to state 59

    $default  reduce using rule 50 (addexpr)


State 32

   54 mulexpr: factor .

    $default  reduce using rule 54 (mulexpr)


State 33

   56 factor: constant .

    $default  reduce using rule 56 (factor)


State 34

    8 parameters: TYPE_VOID .
   15 type: TYPE_VOID .

    ID        reduce using rule 15 (type)
    $default  reduce using rule 8 (parameters)


State 35

    5 function: declarator LP parameters . RP compoundstmt
    6 parameters: parameters . COMMA declarator

    RP     shift, and go to state 60
    COMMA  shift, and go to state 61


State 36

    7 parameters: declarator .

    $default  reduce using rule 7 (parameters)


State 37

   55 factor: identifier .
   58       | identifier . LP arguments RP

    LP  shift, and go to state 42

    $default  reduce using rule 55 (factor)


State 38

   59 factor: OP_SUB factor .

    $default  reduce using rule 59 (factor)


State 39

   60 factor: OP_NOT factor .

    $default  reduce using rule 60 (factor)


State 40

   57 factor: LP expr . RP

    RP  shift, and go to state 62


State 41

   28 expr: identifier OP_ASSIGN . expr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 21
    expr        go to state 63
    logorexpr   go to state 23
    logandexpr  go to state 24
    orexpr      go to state 25
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 42

   58 factor: identifier LP . arguments RP

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    $default  reduce using rule 65 (arguments)

    identifier  go to state 21
    expr        go to state 64
    logorexpr   go to state 23
    logandexpr  go to state 24
    orexpr      go to state 25
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33
    arguments   go to state 65


State 43

   11 declaration: declarator OP_ASSIGN expr SEM .

    $default  reduce using rule 11 (declaration)


State 44

   30 logorexpr: logorexpr OP_LOGOR . logandexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    logandexpr  go to state 66
    orexpr      go to state 25
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 45

   32 logandexpr: logandexpr OP_LOGAND . orexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    orexpr      go to state 67
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 46

   34 orexpr: orexpr OP_OR . xorexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    xorexpr     go to state 68
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 47

   36 xorexpr: xorexpr OP_XOR . andexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    andexpr     go to state 69
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 48

   38 andexpr: andexpr OP_AND . ecmprexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    ecmprexpr   go to state 70
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 49

   40 ecmprexpr: ecmprexpr OP_EQ . cmprexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    cmprexpr    go to state 71
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 50

   41 ecmprexpr: ecmprexpr OP_NEQ . cmprexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    cmprexpr    go to state 72
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 51

   43 cmprexpr: cmprexpr OP_GT . addexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    addexpr     go to state 73
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 52

   44 cmprexpr: cmprexpr OP_LT . addexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    addexpr     go to state 74
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 53

   45 cmprexpr: cmprexpr OP_GTE . addexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    addexpr     go to state 75
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 54

   46 cmprexpr: cmprexpr OP_LTE . addexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    addexpr     go to state 76
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 55

   48 addexpr: addexpr OP_ADD . mulexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    mulexpr     go to state 77
    factor      go to state 32
    constant    go to state 33


State 56

   49 addexpr: addexpr OP_SUB . mulexpr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    mulexpr     go to state 78
    factor      go to state 32
    constant    go to state 33


State 57

   51 mulexpr: mulexpr OP_MUL . factor

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    factor      go to state 79
    constant    go to state 33


State 58

   52 mulexpr: mulexpr OP_DIV . factor

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    factor      go to state 80
    constant    go to state 33


State 59

   53 mulexpr: mulexpr OP_MOD . factor

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 37
    factor      go to state 81
    constant    go to state 33


State 60

    5 function: declarator LP parameters RP . compoundstmt

    LBR  shift, and go to state 82

    compoundstmt  go to state 83


State 61

    6 parameters: parameters COMMA . declarator

    TYPE_INT    shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    TYPE_VOID   shift, and go to state 5

    declarator  go to state 84
    type        go to state 10


State 62

   57 factor: LP expr RP .

    $default  reduce using rule 57 (factor)


State 63

   28 expr: identifier OP_ASSIGN expr .

    $default  reduce using rule 28 (expr)


State 64

   64 arguments: expr .

    $default  reduce using rule 64 (arguments)


State 65

   58 factor: identifier LP arguments . RP
   63 arguments: arguments . COMMA expr

    RP     shift, and go to state 85
    COMMA  shift, and go to state 86


State 66

   30 logorexpr: logorexpr OP_LOGOR logandexpr .
   32 logandexpr: logandexpr . OP_LOGAND orexpr

    OP_LOGAND  shift, and go to state 45

    $default  reduce using rule 30 (logorexpr)


State 67

   32 logandexpr: logandexpr OP_LOGAND orexpr .
   34 orexpr: orexpr . OP_OR xorexpr

    OP_OR  shift, and go to state 46

    $default  reduce using rule 32 (logandexpr)


State 68

   34 orexpr: orexpr OP_OR xorexpr .
   36 xorexpr: xorexpr . OP_XOR andexpr

    OP_XOR  shift, and go to state 47

    $default  reduce using rule 34 (orexpr)


State 69

   36 xorexpr: xorexpr OP_XOR andexpr .
   38 andexpr: andexpr . OP_AND ecmprexpr

    OP_AND  shift, and go to state 48

    $default  reduce using rule 36 (xorexpr)


State 70

   38 andexpr: andexpr OP_AND ecmprexpr .
   40 ecmprexpr: ecmprexpr . OP_EQ cmprexpr
   41          | ecmprexpr . OP_NEQ cmprexpr

    OP_EQ   shift, and go to state 49
    OP_NEQ  shift, and go to state 50

    $default  reduce using rule 38 (andexpr)


State 71

   40 ecmprexpr: ecmprexpr OP_EQ cmprexpr .
   43 cmprexpr: cmprexpr . OP_GT addexpr
   44         | cmprexpr . OP_LT addexpr
   45         | cmprexpr . OP_GTE addexpr
   46         | cmprexpr . OP_LTE addexpr

    OP_GT   shift, and go to state 51
    OP_LT   shift, and go to state 52
    OP_GTE  shift, and go to state 53
    OP_LTE  shift, and go to state 54

    $default  reduce using rule 40 (ecmprexpr)


State 72

   41 ecmprexpr: ecmprexpr OP_NEQ cmprexpr .
   43 cmprexpr: cmprexpr . OP_GT addexpr
   44         | cmprexpr . OP_LT addexpr
   45         | cmprexpr . OP_GTE addexpr
   46         | cmprexpr . OP_LTE addexpr

    OP_GT   shift, and go to state 51
    OP_LT   shift, and go to state 52
    OP_GTE  shift, and go to state 53
    OP_LTE  shift, and go to state 54

    $default  reduce using rule 41 (ecmprexpr)


State 73

   43 cmprexpr: cmprexpr OP_GT addexpr .
   48 addexpr: addexpr . OP_ADD mulexpr
   49        | addexpr . OP_SUB mulexpr

    OP_ADD  shift, and go to state 55
    OP_SUB  shift, and go to state 56

    $default  reduce using rule 43 (cmprexpr)


State 74

   44 cmprexpr: cmprexpr OP_LT addexpr .
   48 addexpr: addexpr . OP_ADD mulexpr
   49        | addexpr . OP_SUB mulexpr

    OP_ADD  shift, and go to state 55
    OP_SUB  shift, and go to state 56

    $default  reduce using rule 44 (cmprexpr)


State 75

   45 cmprexpr: cmprexpr OP_GTE addexpr .
   48 addexpr: addexpr . OP_ADD mulexpr
   49        | addexpr . OP_SUB mulexpr

    OP_ADD  shift, and go to state 55
    OP_SUB  shift, and go to state 56

    $default  reduce using rule 45 (cmprexpr)


State 76

   46 cmprexpr: cmprexpr OP_LTE addexpr .
   48 addexpr: addexpr . OP_ADD mulexpr
   49        | addexpr . OP_SUB mulexpr

    OP_ADD  shift, and go to state 55
    OP_SUB  shift, and go to state 56

    $default  reduce using rule 46 (cmprexpr)


State 77

   48 addexpr: addexpr OP_ADD mulexpr .
   51 mulexpr: mulexpr . OP_MUL factor
   52        | mulexpr . OP_DIV factor
   53        | mulexpr . OP_MOD factor

    OP_MUL  shift, and go to state 57
    OP_DIV  shift, and go to state 58
    OP_MOD  shift, and go to state 59

    $default  reduce using rule 48 (addexpr)


State 78

   49 addexpr: addexpr OP_SUB mulexpr .
   51 mulexpr: mulexpr . OP_MUL factor
   52        | mulexpr . OP_DIV factor
   53        | mulexpr . OP_MOD factor

    OP_MUL  shift, and go to state 57
    OP_DIV  shift, and go to state 58
    OP_MOD  shift, and go to state 59

    $default  reduce using rule 49 (addexpr)


State 79

   51 mulexpr: mulexpr OP_MUL factor .

    $default  reduce using rule 51 (mulexpr)


State 80

   52 mulexpr: mulexpr OP_DIV factor .

    $default  reduce using rule 52 (mulexpr)


State 81

   53 mulexpr: mulexpr OP_MOD factor .

    $default  reduce using rule 53 (mulexpr)


State 82

   21 compoundstmt: LBR . items RBR

    $default  reduce using rule 23 (items)

    items  go to state 87


State 83

    5 function: declarator LP parameters RP compoundstmt .

    $default  reduce using rule 5 (function)


State 84

    6 parameters: parameters COMMA declarator .

    $default  reduce using rule 6 (parameters)


State 85

   58 factor: identifier LP arguments RP .

    $default  reduce using rule 58 (factor)


State 86

   63 arguments: arguments COMMA . expr

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 21
    expr        go to state 88
    logorexpr   go to state 23
    logandexpr  go to state 24
    orexpr      go to state 25
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 87

   21 compoundstmt: LBR items . RBR
   22 items: items . item

    NUM_INT     shift, and go to state 16
    NUM_FLOAT   shift, and go to state 17
    ID          shift, and go to state 14
    TYPE_INT    shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    TYPE_VOID   shift, and go to state 5
    OP_SUB      shift, and go to state 18
    OP_NOT      shift, and go to state 19
    LP          shift, and go to state 20
    LBR         shift, and go to state 82
    RBR         shift, and go to state 89
    SEM         shift, and go to state 90
    IF          shift, and go to state 91
    WHILE       shift, and go to state 92
    FOR         shift, and go to state 93
    RETURN      shift, and go to state 94

    declaration   go to state 95
    declarator    go to state 96
    type          go to state 10
    identifier    go to state 21
    statement     go to state 97
    compoundstmt  go to state 98
    item          go to state 99
    exprstmt      go to state 100
    expr          go to state 101
    logorexpr     go to state 23
    logandexpr    go to state 24
    orexpr        go to state 25
    xorexpr       go to state 26
    andexpr       go to state 27
    ecmprexpr     go to state 28
    cmprexpr      go to state 29
    addexpr       go to state 30
    mulexpr       go to state 31
    factor        go to state 32
    constant      go to state 33
    ctrlstmt      go to state 102
    jumpstmt      go to state 103


State 88

   63 arguments: arguments COMMA expr .

    $default  reduce using rule 63 (arguments)


State 89

   21 compoundstmt: LBR items RBR .

    $default  reduce using rule 21 (compoundstmt)


State 90

   27 exprstmt: SEM .

    $default  reduce using rule 27 (exprstmt)


State 91

   66 ctrlstmt: IF . LP expr RP statement
   67         | IF . LP expr RP statement ELSE statement

    LP  shift, and go to state 104


State 92

   68 ctrlstmt: WHILE . LP expr RP statement

    LP  shift, and go to state 105


State 93

   69 ctrlstmt: FOR . LP initstmt exprstmt expr RP statement
   70         | FOR . LP initstmt exprstmt RP statement

    LP  shift, and go to state 106


State 94

   73 jumpstmt: RETURN . exprstmt

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20
    SEM        shift, and go to state 90

    identifier  go to state 21
    exprstmt    go to state 107
    expr        go to state 101
    logorexpr   go to state 23
    logandexpr  go to state 24
    orexpr      go to state 25
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 95

   24 item: declaration .

    $default  reduce using rule 24 (item)


State 96

   10 declaration: declarator . SEM
   11            | declarator . OP_ASSIGN expr SEM

    OP_ASSIGN  shift, and go to state 11
    SEM        shift, and go to state 13


State 97

   25 item: statement .

    $default  reduce using rule 25 (item)


State 98

   17 statement: compoundstmt .

    $default  reduce using rule 17 (statement)


State 99

   22 items: items item .

    $default  reduce using rule 22 (items)


State 100

   18 statement: exprstmt .

    $default  reduce using rule 18 (statement)


State 101

   26 exprstmt: expr . SEM

    SEM  shift, and go to state 108


State 102

   19 statement: ctrlstmt .

    $default  reduce using rule 19 (statement)


State 103

   20 statement: jumpstmt .

    $default  reduce using rule 20 (statement)


State 104

   66 ctrlstmt: IF LP . expr RP statement
   67         | IF LP . expr RP statement ELSE statement

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 21
    expr        go to state 109
    logorexpr   go to state 23
    logandexpr  go to state 24
    orexpr      go to state 25
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 105

   68 ctrlstmt: WHILE LP . expr RP statement

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20

    identifier  go to state 21
    expr        go to state 110
    logorexpr   go to state 23
    logandexpr  go to state 24
    orexpr      go to state 25
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 106

   69 ctrlstmt: FOR LP . initstmt exprstmt expr RP statement
   70         | FOR LP . initstmt exprstmt RP statement

    NUM_INT     shift, and go to state 16
    NUM_FLOAT   shift, and go to state 17
    ID          shift, and go to state 14
    TYPE_INT    shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    TYPE_VOID   shift, and go to state 5
    OP_SUB      shift, and go to state 18
    OP_NOT      shift, and go to state 19
    LP          shift, and go to state 20
    SEM         shift, and go to state 90

    declaration  go to state 111
    declarator   go to state 96
    type         go to state 10
    identifier   go to state 21
    exprstmt     go to state 112
    expr         go to state 101
    logorexpr    go to state 23
    logandexpr   go to state 24
    orexpr       go to state 25
    xorexpr      go to state 26
    andexpr      go to state 27
    ecmprexpr    go to state 28
    cmprexpr     go to state 29
    addexpr      go to state 30
    mulexpr      go to state 31
    factor       go to state 32
    constant     go to state 33
    initstmt     go to state 113


State 107

   73 jumpstmt: RETURN exprstmt .

    $default  reduce using rule 73 (jumpstmt)


State 108

   26 exprstmt: expr SEM .

    $default  reduce using rule 26 (exprstmt)


State 109

   66 ctrlstmt: IF LP expr . RP statement
   67         | IF LP expr . RP statement ELSE statement

    RP  shift, and go to state 114


State 110

   68 ctrlstmt: WHILE LP expr . RP statement

    RP  shift, and go to state 115


State 111

   72 initstmt: declaration .

    $default  reduce using rule 72 (initstmt)


State 112

   71 initstmt: exprstmt .

    $default  reduce using rule 71 (initstmt)


State 113

   69 ctrlstmt: FOR LP initstmt . exprstmt expr RP statement
   70         | FOR LP initstmt . exprstmt RP statement

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20
    SEM        shift, and go to state 90

    identifier  go to state 21
    exprstmt    go to state 116
    expr        go to state 101
    logorexpr   go to state 23
    logandexpr  go to state 24
    orexpr      go to state 25
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 114

   66 ctrlstmt: IF LP expr RP . statement
   67         | IF LP expr RP . statement ELSE statement

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20
    LBR        shift, and go to state 82
    SEM        shift, and go to state 90
    IF         shift, and go to state 91
    WHILE      shift, and go to state 92
    FOR        shift, and go to state 93
    RETURN     shift, and go to state 94

    identifier    go to state 21
    statement     go to state 117
    compoundstmt  go to state 98
    exprstmt      go to state 100
    expr          go to state 101
    logorexpr     go to state 23
    logandexpr    go to state 24
    orexpr        go to state 25
    xorexpr       go to state 26
    andexpr       go to state 27
    ecmprexpr     go to state 28
    cmprexpr      go to state 29
    addexpr       go to state 30
    mulexpr       go to state 31
    factor        go to state 32
    constant      go to state 33
    ctrlstmt      go to state 102
    jumpstmt      go to state 103


State 115

   68 ctrlstmt: WHILE LP expr RP . statement

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20
    LBR        shift, and go to state 82
    SEM        shift, and go to state 90
    IF         shift, and go to state 91
    WHILE      shift, and go to state 92
    FOR        shift, and go to state 93
    RETURN     shift, and go to state 94

    identifier    go to state 21
    statement     go to state 118
    compoundstmt  go to state 98
    exprstmt      go to state 100
    expr          go to state 101
    logorexpr     go to state 23
    logandexpr    go to state 24
    orexpr        go to state 25
    xorexpr       go to state 26
    andexpr       go to state 27
    ecmprexpr     go to state 28
    cmprexpr      go to state 29
    addexpr       go to state 30
    mulexpr       go to state 31
    factor        go to state 32
    constant      go to state 33
    ctrlstmt      go to state 102
    jumpstmt      go to state 103


State 116

   69 ctrlstmt: FOR LP initstmt exprstmt . expr RP statement
   70         | FOR LP initstmt exprstmt . RP statement

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20
    RP         shift, and go to state 119

    identifier  go to state 21
    expr        go to state 120
    logorexpr   go to state 23
    logandexpr  go to state 24
    orexpr      go to state 25
    xorexpr     go to state 26
    andexpr     go to state 27
    ecmprexpr   go to state 28
    cmprexpr    go to state 29
    addexpr     go to state 30
    mulexpr     go to state 31
    factor      go to state 32
    constant    go to state 33


State 117

   66 ctrlstmt: IF LP expr RP statement .
   67         | IF LP expr RP statement . ELSE statement

    ELSE  shift, and go to state 121

    $default  reduce using rule 66 (ctrlstmt)


State 118

   68 ctrlstmt: WHILE LP expr RP statement .

    $default  reduce using rule 68 (ctrlstmt)


State 119

   70 ctrlstmt: FOR LP initstmt exprstmt RP . statement

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20
    LBR        shift, and go to state 82
    SEM        shift, and go to state 90
    IF         shift, and go to state 91
    WHILE      shift, and go to state 92
    FOR        shift, and go to state 93
    RETURN     shift, and go to state 94

    identifier    go to state 21
    statement     go to state 122
    compoundstmt  go to state 98
    exprstmt      go to state 100
    expr          go to state 101
    logorexpr     go to state 23
    logandexpr    go to state 24
    orexpr        go to state 25
    xorexpr       go to state 26
    andexpr       go to state 27
    ecmprexpr     go to state 28
    cmprexpr      go to state 29
    addexpr       go to state 30
    mulexpr       go to state 31
    factor        go to state 32
    constant      go to state 33
    ctrlstmt      go to state 102
    jumpstmt      go to state 103


State 120

   69 ctrlstmt: FOR LP initstmt exprstmt expr . RP statement

    RP  shift, and go to state 123


State 121

   67 ctrlstmt: IF LP expr RP statement ELSE . statement

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20
    LBR        shift, and go to state 82
    SEM        shift, and go to state 90
    IF         shift, and go to state 91
    WHILE      shift, and go to state 92
    FOR        shift, and go to state 93
    RETURN     shift, and go to state 94

    identifier    go to state 21
    statement     go to state 124
    compoundstmt  go to state 98
    exprstmt      go to state 100
    expr          go to state 101
    logorexpr     go to state 23
    logandexpr    go to state 24
    orexpr        go to state 25
    xorexpr       go to state 26
    andexpr       go to state 27
    ecmprexpr     go to state 28
    cmprexpr      go to state 29
    addexpr       go to state 30
    mulexpr       go to state 31
    factor        go to state 32
    constant      go to state 33
    ctrlstmt      go to state 102
    jumpstmt      go to state 103


State 122

   70 ctrlstmt: FOR LP initstmt exprstmt RP statement .

    $default  reduce using rule 70 (ctrlstmt)


State 123

   69 ctrlstmt: FOR LP initstmt exprstmt expr RP . statement

    NUM_INT    shift, and go to state 16
    NUM_FLOAT  shift, and go to state 17
    ID         shift, and go to state 14
    OP_SUB     shift, and go to state 18
    OP_NOT     shift, and go to state 19
    LP         shift, and go to state 20
    LBR        shift, and go to state 82
    SEM        shift, and go to state 90
    IF         shift, and go to state 91
    WHILE      shift, and go to state 92
    FOR        shift, and go to state 93
    RETURN     shift, and go to state 94

    identifier    go to state 21
    statement     go to state 125
    compoundstmt  go to state 98
    exprstmt      go to state 100
    expr          go to state 101
    logorexpr     go to state 23
    logandexpr    go to state 24
    orexpr        go to state 25
    xorexpr       go to state 26
    andexpr       go to state 27
    ecmprexpr     go to state 28
    cmprexpr      go to state 29
    addexpr       go to state 30
    mulexpr       go to state 31
    factor        go to state 32
    constant      go to state 33
    ctrlstmt      go to state 102
    jumpstmt      go to state 103


State 124

   67 ctrlstmt: IF LP expr RP statement ELSE statement .

    $default  reduce using rule 67 (ctrlstmt)


State 125

   69 ctrlstmt: FOR LP initstmt exprstmt expr RP statement .

    $default  reduce using rule 69 (ctrlstmt)
